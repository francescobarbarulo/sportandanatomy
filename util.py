# coding=utf-8

import datetime
from database import Database

class Exercise:
    def __init__(self, data):
        self.data = data
        self.goodness = self.get_goodness()

    def get_goodness(self):
        average_gap = 0
        
        for position in self.data:
            average_gap += abs(position['move'] - position['ideal'])
        
        average_gap /= len(self.data)
        return average_gap < 0.2 # Inserire la soglia per determinare la bontÃ 

		
def get_week_sessions():
    db = Database()
    queryText = '''SELECT *
                   FROM session
                   WHERE WEEK(DATE(timestamp)) = WEEK(CURRENT_DATE)'''
    cursor = db.performQuery(queryText);
    db.closeConnection()
    return cursor

def good_exercises(exercises):
    count = 0
    for exercise in exercises:
        if exercise.goodness:
            count += 1

    return count

# inserimento dati
'''
def insert_rows():
	db = Database()

	real = [1, 0.9999962299, 0.999985516, 0.9999785989, 0.9999714582, 0.9999544341, 0.9999501538, 0.9999338292, 0.999918601, 0.9999311784, 0.9999045601, 0.9999253578, 0.9999677162, 0.9999818088, 0.999996991, 0.9999909586, 0.9999611802, 0.9999264551, 0.9998951367, 0.9998886972, 0.9998586975, 0.9998698437, 0.9998511048, 0.9998548972, 0.9998415777, 0.9997347449, 0.9995510042, 0.999294486, 0.9987949351, 0.9980180018, 0.9965943596, 0.9963841437, 0.9964420009, 0.9967726277, 0.9972074603, 0.9976194662, 0.9978422275, 0.9980946712, 0.9982019073, 0.998043617, 0.9977643146, 0.9974793544, 0.9969556602, 0.9961351675, 0.994986376, 0.9936056561, 0.9919768587, 0.9902848742, 0.9881038313, 0.9855713532, 0.9828781424, 0.9796980995, 0.9761916756, 0.9720002813, 0.9675649748, 0.9630389251, 0.9528690279, 0.9482543617, 0.9447142869, 0.9363246322, 0.9319617767, 0.9286169169, 0.9265455767, 0.9255619825, 0.9242486634, 0.9220485268, 0.9205200859, 0.9184724798, 0.9160104066, 0.9130576839, 0.9102025925, 0.9073198312, 0.9039408916, 0.9002833359, 0.8965003379, 0.8892489254, 0.8863055363, 0.8855128807, 0.8847163395, 0.884678466, 0.88541071, 0.8862971872, 0.8868027303, 0.8863142808, 0.884428406, 0.8817521933, 0.8789440079, 0.8768130151, 0.8754583423, 0.8745025004, 0.8738277654, 0.8730734445, 0.8726296184, 0.8710733732, 0.8692432223, 0.8668756531, 0.862997839, 0.8619153454, 0.8611994186, 0.8557350625, 0.8524522121, 0.8496153835, 0.8479152668, 0.8473835491, 0.8483948342, 0.8500004345, 0.853112963, 0.8574341306, 0.8618312597, 0.8655501333, 0.8715319618, 0.8783270816, 0.8814172439, 0.8837198449, 0.8919154088, 0.8970553714, 0.9029626246, 0.9088705721, 0.9131072637, 0.9176156315, 0.9223346378, 0.9271473963, 0.9314511841, 0.9350301868, 0.9382187832, 0.9417981231, 0.9462672437, 0.9510052516, 0.9551738737, 0.9590235945, 0.9625835625, 0.9721730599, 0.9756307807, 0.9827020943, 0.9839463848, 0.9859036079, 0.9870199142, 0.9884761623, 0.9907899638, 0.9918002757, 0.993364307, 0.9945912609, 0.9947330913, 0.9949267884, 0.9951556741, 0.9951003274, 0.9952435791, 0.9954967143, 0.9959806925, 0.9965301305, 0.9968969753, 0.9970809219, 0.9972292241, 0.9971436628, 0.9968506795, 0.9961784878, 0.9953541666, 0.9944920937, 0.99339588, 0.9917309483, 0.9902654301, 0.9888657293, 0.987672009, 0.9858545799, 0.9836982646, 0.9817135667, 0.9796253593, 0.9772800641, 0.97466581, 0.9712925094, 0.9674050796, 0.9633462749, 0.959260083, 0.9559095858, 0.9489977997, 0.9470388731, 0.9457802546, 0.9442949887, 0.9435361017, 0.9423558329, 0.9414103254, 0.9405850163, 0.9400149272, 0.9389708216, 0.9377366377, 0.9364314235, 0.9351444316, 0.9341352635, 0.9329173674, 0.9318541021, 0.9304890268, 0.9289264181, 0.9275012124, 0.9260306364, 0.924787112, 0.9239726943, 0.9229098154, 0.9220710684, 0.9209426835, 0.9198273004, 0.9184319432]
	ideal = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.999390827, 0.9975640503, 0.9945218954, 0.9902680687, 0.984807753, 0.9781476007, 0.9702957263, 0.9612616959, 0.9510565163, 0.9396926208, 0.9271838546, 0.9135454576, 0.8987940463, 0.8829475929, 0.8660254038, 0.8480480962, 0.8290375726, 0.8090169944, 0.7880107536, 0.7660444431, 0.7431448255, 0.7193398003, 0.6946583705, 0.6691306064, 0.6427876097, 0.6156614753, 0.5877852523, 0.5591929035, 0.5299192642, 0.5, 0.4694715628, 0.4383711468, 0.4067366431, 0.3746065934, 0.3420201433, 0.3090169944, 0.2756373558, 0.2419218956, 0.2079116908, 0.1736481777, 0.139173101, 0.1045284633, 0.06975647374, 0.0348994967, 0, 0, 0.0348994967, 0.06975647374, 0.1045284633, 0.139173101, 0.1736481777, 0.2079116908, 0.2419218956, 0.2756373558, 0.3090169944, 0.3420201433, 0.3746065934, 0.4067366431, 0.4383711468, 0.4694715628, 0.5, 0.5299192642, 0.5591929035, 0.5877852523, 0.6156614753, 0.6427876097, 0.6691306064, 0.6946583705, 0.7193398003, 0.7431448255, 0.7660444431, 0.7880107536, 0.8090169944, 0.8290375726, 0.8480480962, 0.8660254038, 0.8829475929, 0.8987940463, 0.9135454576, 0.9271838546, 0.9396926208, 0.9510565163, 0.9612616959, 0.9702957263, 0.9781476007, 0.984807753, 0.9902680687, 0.9945218954, 0.9975640503, 0.999390827, 1, 1, 0.999390827, 0.9975640503, 0.9945218954, 0.9902680687, 0.984807753, 0.9781476007, 0.9702957263, 0.9612616959, 0.9510565163, 0.9396926208, 0.9271838546, 0.9135454576, 0.8987940463, 0.8829475929, 0.8660254038, 0.8480480962, 0.8290375726, 0.8090169944, 0.7880107536, 0.7660444431, 0.7431448255, 0.7193398003, 0.7071067812, 0.7009092643, 0.6946583705, 0.6883545757, 0.6819983601, 0.6755902076, 0.6691306064, 0.6626200482, 0.656059029, 0.6494480483, 0.6427876097, 0.6360782203, 0.629320391, 0.6225146366, 0.6156614753, 0.608761429, 0.6018150232, 0.5948227868, 0.5877852523, 0.5807029557, 0.5735764364, 0.5664062369, 0.5591929035, 0.5519369853, 0.544639035, 0.5372996083, 0.5299192642, 0.5224985647, 0.5150380749, 0.507538363, 0.5, 0.4924235601, 0.4848096202, 0.4771587603, 0.4694715628, 0.4617486132, 0.4539904997, 0.4461978131, 0.4383711468, 0.4305110968, 0.4226182617, 0.4146932427, 0.4067366431, 0.3987490689, 0.3907311285, 0.3826834324, 0.3746065934, 0.3665012267, 0.3583679495, 0.3502073813, 0.3420201433, 0.3338068592, 0.3255681545, 0.3173046564, 0.3090169944, 0.3007057995, 0.2923717047]

	for i in range(0, len(real)):
		queryText = 'INSERT INTO session(move, ideal) VALUES(%.10f, %.10f)' % (real[i], ideal[i])
		cursor = db.performQuery(queryText);
		time.sleep(0.05);

	db.closeConnection()
'''
#insert_rows()

result = get_week_sessions().fetchall()
week_exercises = []
i = 0

while i < len(result):

    start = result[i]
    positions = []
    
    print str(i)+' - '+str(start)
    while i < len(result) and result[i]['timestamp'] < start['timestamp'] + datetime.timedelta(minutes=2):
        positions.append(result[i])
        i += 1

    week_exercises.append(Exercise(positions))

